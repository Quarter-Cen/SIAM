from supabase import create_client, Client
from dotenv import load_dotenv
import jwt, os
from datetime import datetime
from fastapi.security import HTTPBearer
from fastapi import Depends, HTTPException, status, APIRouter
from datetime import datetime, timedelta
from typing import Optional
from typing import List, Optional, Dict, Any
from model import MilestoneData

load_dotenv()

url = os.getenv("URL_SUPABASE")
key = os.getenv("KEY_SUPABASE")
supabase: Client = create_client(url, key)

security = HTTPBearer()
JWT_SECRET = key
JWT_ALGORITHM = "HS256"

def get_current_user(token: str = Depends(security)):
    try:
        payload = jwt.decode(token.credentials, JWT_SECRET, algorithms=["HS256"])
        
        user_id = payload.get("sub")
        user_role = payload.get("role")

        if not user_id or not user_role:
            raise HTTPException(status_code=401, detail="Invalid token payload")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # Query ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        table_name = "student" if user_role == "student" else "teacher"
        id_column = "sid" if user_role == "student" else "tid"

        response = supabase.table(table_name).select(id_column).eq(id_column, user_id).execute()
        if not response.data:
            raise HTTPException(status_code=401, detail="User profile not found")

        return {
            "id": user_id,
            "role": user_role
        }

    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")
    except Exception:
        raise HTTPException(status_code=500, detail="Internal server error")

def role_required(required_roles: list[str]):
    def wrapper(user = Depends(get_current_user)):
        role = user["role"]   # <-- ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
        if role not in required_roles:
            raise HTTPException(status_code=403, detail="Not enough permissions")
        return user
    return wrapper

def create_token(user_id: str, role: str):
    payload = {
        "sub": user_id,
        "role": role,
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)

def decode_token(token: str):
    try:
        return jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

def get_student_profile(user_id: str):
    try:
        response = supabase.table("student").select("sid, name, teamid").eq("sid", user_id).single().execute()
        return response.data
    except Exception as e:
        print(f"Error fetching user profile: {e}")
        return None

def get_student_profile_for_sheet(user_id: str):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (sid, name, teamid) ‡πÅ‡∏•‡∏∞ ajdv_pm_sheet ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
    """
    try:
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sid
        student_response = supabase.table("student").select("sid, name, teamid").eq("sid", user_id).single().execute()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not student_response.data:
            print(f"Error: Student with sid '{user_id}' not found.")
            return None

        team_id = student_response.data.get("teamid")
        if not team_id:
            print(f"Error: Student '{user_id}' does not have a teamid.")
            return student_response.data  # ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö teamid

        # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ajdv_pm_sheet ‡∏à‡∏≤‡∏Å teamid ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤
        team_response = supabase.table("team").select("ajdv_pm_sheet").eq("tmid", team_id).single().execute()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        result_data = {
            "sid": student_response.data.get("sid"),
            "name": student_response.data.get("name"),
            "teamid": team_id,
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ajdv_pm_sheet ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            "ajdv_pm_sheet": team_response.data.get("ajdv_pm_sheet") if team_response.data else None
        }

        return result_data

    except Exception as e:
        print(f"Error fetching user profile for sheet: {e}")
        return None

def authenticate_user(username: str, password: str) -> Optional[dict]:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á student ‡πÅ‡∏•‡∏∞ teacher
    """
    try:
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student ‡∏Å‡πà‡∏≠‡∏ô
        student_response = supabase.table('student').select("sid").eq("sid", username).execute()
        student_data = student_response.data
        if student_data:
            user = student_data[0]
            if user['sid'] == password:
                return {"id": user['sid'], "role": "student"}
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ student")
        # 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á student ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á teacher
        teacher_response = supabase.table('teacher').select("tid").eq("tid", username).execute()
        teacher_data = teacher_response.data
        if teacher_data:
            print("‡∏°‡∏µ teacher")
            user = teacher_data[0]
            print(str(user["tid"]) == password)

            if str(user["tid"]) == password:
                return {"id": user['tid'], "role": "teacher"}

        # 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None
        return None

    except Exception as e:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        print(f"Error during authentication: {e}")
        return None




def get_projects():
    response = supabase.table("student").select("*").execute()
    return response.data

def update_milestone(pjid: int, update_dict: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Field ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Project Milestone ID (pmid) ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Supabase
    """
    try:
        response = (
            supabase.table('project_milestone')

            .update(update_dict) 
            .eq('pmid', pjid) 
            .execute()
        )
        
        updated_data = response.data

        # üõë ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (response.data ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        if updated_data:
            # Supabase ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô List of Dicts ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Dict ‡πÅ‡∏£‡∏Å
            return updated_data[0] 
        
        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà Supabase ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏û‡∏ö pmid ‡∏ô‡∏±‡πâ‡∏ô)
        return None 
    
    except Exception as e:
        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏ä‡πà‡∏ô DB Connection Error ‡∏´‡∏£‡∏∑‡∏≠ Invalid Data
        print(f"Supabase UPDATE error: {e}")
        return None
def get_milestone():
    response = supabase.table("project_milestone").select("*").execute()
    return response.data


def get_group_task(team_id: str):
    response = supabase.rpc(
        "get_group_task_summary", 
        {"team_id": team_id} 
    ).execute()
    return response.data


def get_topic(tid: int):
    response = supabase.table("topic").select("*").eq("tid", tid).execute()
    return response.data


def check_topic_for_team(team_id: str):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    """
    try:
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∑‡∏≠ 'project' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'team_id'
        # ‡πÉ‡∏ä‡πâ .count() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        response = supabase.table("project").select("teamid", count="exact").eq("teamid", team_id).execute()
        return response.count > 0
    except Exception as e:
        print(f"Error checking topic for team: {e}")
        return False
    

def check_topic_for_sent(team_id: str):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    """
    try:
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∑‡∏≠ 'project' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'team_id'
        # ‡πÉ‡∏ä‡πâ .count() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        response = supabase.table("topic").select("teamid", count="exact").eq("teamid", team_id).ne("status", "not-pass").execute()
        return response.count > 0
    except Exception as e:
        print(f"Error checking topic for team: {e}")
        return False
    
    
def submit_new_project(project_data: dict):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'project'
    """
    try:
        response = supabase.table("topic").insert(project_data).execute()
        return response.data[0]
    except Exception as e:
        print(f"Error submitting new project: {e}")
        return None
    

def get_student_team(student_id: str):
    try:
        response = supabase.table("student").select("teamid").eq("sid", student_id).execute()
        return response.data[0]
    except Exception as e:
        print(f"Error find student team: {e}")
        return None
    
def get_teacher_profile(teacher_id: str):
    try:
        response = supabase.table("teacher").select("tid, name").eq("tid", teacher_id).single().execute()
        return response.data
    except Exception as e:
        print(f"Error fetching user profile: {e}")
        return None
    


def process_topic_action(
    tpid: str,
    action: str,
    tid: str,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô str
    teamid: str,
    topicName: str,
    year: str,
    remark: str | None = None
) -> dict:
    if action == "accept":
        new_status = "pass"
        # ‡∏´‡∏≤‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏≠‡∏á team
        update_team_data = {
            "name": topicName,
            "status": "on-going",
            "teacherid": tid, 
        }

        create_project_data = {
            "topic": topicName,
            "objective": "",
            "status": "on-going",
            "year" : year,
            "teamid": teamid
        }
    elif action == "reject":
        new_status = "not-pass"
        # ‡∏´‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á team ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        update_team_data = {} 
    else:
        raise ValueError("Invalid action. Must be 'accept' or 'reject'.")

    update_topic_data = {
        "status": new_status,
        "remark": remark,
    }

    try:
        topic_response = supabase.table("topic").update(update_topic_data).eq("tpid", tpid).execute()
        if not topic_response.data:
            raise HTTPException(status_code=404, detail="Topic not found or already processed")

        # ‡∏ñ‡πâ‡∏≤ action ‡∏Ñ‡∏∑‡∏≠ 'accept' ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á team
        if action == "accept":
            team_response = supabase.table("team").update(update_team_data).eq("tmid", teamid).execute()
            if not team_response.data:
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï team ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                print(f"Failed to update team: Team ID {teamid} not found.")
                raise HTTPException(status_code=404, detail="Topic updated, but associated Team not found or failed to update.")
            project_create = supabase.table("project").insert(create_project_data).execute()
            if not project_create.data:
                print(f"Failed to create project.")
                raise HTTPException(status_code=404, detail="Topic updated, but associated Team not found or failed to update.")
            # ‡∏î‡∏∂‡∏á project_id ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            project_id = project_create.data[0].get("pid") 
            if not project_id:
                raise HTTPException(status_code=500, detail="Failed to retrieve new project ID.")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            documents_to_insert = [
                {"doc_type": "proposal", "status": "not-submitted", "pid": project_id},
                {"doc_type": "slide-proposal", "status": "not-submitted", "pid": project_id},
                {"doc_type": "thesis", "status": "not-submitted", "pid": project_id},
                {"doc_type": "slide-final-present", "status": "not-submitted", "pid": project_id},
            ]

            # ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ insert ‡πÉ‡∏ô Supabase ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            doc_submit_create = supabase.table("doc").insert(documents_to_insert).execute()
            
            if not doc_submit_create.data:
                print(f"Failed to create documents for project ID: {project_id}.")
                raise HTTPException(status_code=500, detail="Failed to create initial documents.")
            
            
        return {
            "message": f"Topic '{tpid}' has been {new_status}.",
            "new_status": new_status,
        }
    except Exception as e:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ rollback ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        print(f"Error during topic and team update: {e}")
        # ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rollback ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        raise HTTPException(status_code=500, detail=f"Database error: {e}")
    
def check_teacher_teams_for_projects(tid: str):
    """
    Checks for projects associated with a teacher's teams.
    
    Args:
        tid (str): The teacher ID.
        
    Returns:
        The response object from the Supabase query, or None if an error occurs.
    """
    try:
        # Step 1: Get all team IDs associated with the teacher
        teams_response = supabase.table("team").select("tmid").eq("teacherid", tid).execute()
        
        # Check if the teacher has any teams
        if not teams_response.data:
            print("No teams found for this teacher.")
            return None
            
        # Extract a list of team IDs
        team_ids = [team['tmid'] for team in teams_response.data]

        # Step 2: Query the 'project' table for any of these team IDs
        # Use the 'in_' filter to check against an array of IDs
        projects_response = supabase.table("project").select("*").in_("teamid", team_ids).execute()
        print(projects_response.data)
        return projects_response.data
        
    except Exception as e:
        print(f"Error checking teacher's teams for projects: {e}")
        return None
    
def get_project_by_team(tmid: str):
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• project ‡∏à‡∏≤‡∏Å teamid
    response = supabase.table("project").select("*").eq("teamid", tmid).execute()
    project = response.data
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")

    data_row = project[0]
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á "student"
    members_response = supabase.table("student").select("sid").eq("teamid", tmid).execute()
    team_members = [m['sid'] for m in members_response.data]

    find_teacherID_team = supabase.table("team").select("teacherid").eq("tmid", tmid).execute()
    teacher_id = find_teacherID_team.data[0]['teacherid']

    advisors_names = []
    if teacher_id:
        find_teacher_name = supabase.table("teacher").select("name").eq("tid", teacher_id).execute()
        advisors_names = [t['name'] for t in find_teacher_name.data]

    return {
        "title": data_row["topic"],  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å "title" ‡πÄ‡∏õ‡πá‡∏ô "topic"
        "team": team_members,
        "advisors": advisors_names,
        "goal": data_row["objective"], # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å "goal" ‡πÄ‡∏õ‡πá‡∏ô "objective"
        "year": data_row["year"],      # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤ year ‡πÉ‡∏ô DB ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    }

def update_project_goal(team_id: str, new_goal: str, user_id: str) -> dict:
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå (goal) ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô
    :param team_id: ID ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
    :param new_goal: ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÉ‡∏´‡∏°‡πà
    :param user_id: ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    :return: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    """
    # ---  Authorization Check ---
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    if not is_user_member_of_team(user_id=user_id, team_id=team_id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You do not have permission to edit this project."
        )

    # ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    try:
        response = supabase.table('project').update({'objective': new_goal}).eq('teamid', team_id).execute()
        if response.data:
            return response.data[0]
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Project for team {team_id} not found.")
    except Exception as e:
        print(f"Error updating project goal: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Could not update project goal.")
    
def is_user_member_of_team(user_id: str, team_id: str) -> bool:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á Team ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    :param user_id: ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (sid) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Token
    :param team_id: ID ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    :return: True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
    """

    print(team_id, user_id)
    try:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å user_id ‡∏ó‡∏µ‡πà login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        response = supabase.table('student').select('teamid').eq('sid', user_id).single().execute()
        
        if response.data and response.data.get('teamid') == team_id:
            return True
        return False
    except Exception:
        return False

async def get_documents_by_team_id(team_id: str):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ‡πÇ‡∏î‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ project_id ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏Å‡πà‡∏≠‡∏ô
    """
    try:
        # 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ project_id ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
        project_response = supabase.table('project').select('pid').eq('teamid', team_id).single().execute()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö project_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not project_response.data:
            print(f"No project found for team ID: {team_id}")
            return []
            
        project_id = project_response.data.get('pid')
        
        # 2. ‡πÉ‡∏ä‡πâ project_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'documents'
        documents_response = supabase.table('doc').select('*').eq('pid', project_id).execute()

        if not documents_response.data:
            return []

        return documents_response.data
        
    except Exception as e:
        print(f"Error fetching documents: {e}")
        # ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ
        return []

async def get_all_milestones() -> Optional[MilestoneData]:
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Milestone ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    """
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'milestone'
        milestone_response = supabase.table('project_milestone').select('*').single().execute()
        print(milestone_response)
        if not milestone_response.data:
            return None # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• milestones

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Supabase ‡πÄ‡∏õ‡πá‡∏ô Pydantic Model
        return MilestoneData.model_validate(milestone_response.data)
    except Exception as e:
        print(f"Error fetching milestones: {e}")
        return None


async def get_project_suggestions(team_id: str):
    """
    Fetches recommendations and additional_work data for a given team from the project table.
    """
    try:
        # The `await` goes here, before the entire chain of methods.
        response = supabase.table("project").select("recommendations, additional_work").eq("teamid", team_id).single().execute()
        return response.data
    except Exception as e:
        print(f"Error fetching project suggestions: {e}")
        return None
    

def get_project_name(team_id: str):
    try:
        # The `await` goes here, before the entire chain of methods.
        response = supabase.table("project").select("topic").eq("teamid", team_id).single().execute()
        return response.data
    
    except Exception as e:
        print(f"Error fetching project name: {e}")
        return None
    
async def set_project_suggestions(set_response: list, team_id: str):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    """
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ list ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if not set_response or not isinstance(set_response, list):
        print("Error: Invalid set_response format. Expected a non-empty list.")
        return None

    # 2. ‡∏î‡∏∂‡∏á dictionary ‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å list
    data_dict = set_response[0]

    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dictionary ‡∏°‡∏µ 'result' key
    if 'result' not in data_dict:
        print("Error: 'result' key not found in the response dictionary.")
        return None
    
    # 4. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ recommendations ‡πÅ‡∏•‡∏∞ additional_work
    recommendations = data_dict['result'].get('recommendations', '')
    additional_work = data_dict['result'].get('additional_work', '')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    payload = {
        "recommendations": recommendations,
        "additional_work": additional_work
    }
    
    print(f"Updating project for team {team_id} with data: {payload}")
    
    try:

        response = supabase.table("project").update(payload).eq("teamid", team_id).execute()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if response.data:
            print("Successfully updated project suggestions.")
            return response.data
        else:
            print("Update operation successful but no data was returned.")
            return None

    except Exception as e:
        print(f"Error updating project suggestions: {e}")
        return None
    



def get_team_profile_for_sheet(teamid: str):
    try:

        team_response = supabase.table("team").select("ajdv_pm_sheet").eq("tmid", teamid).single().execute()
        
        result_data = {
            "teamid": teamid,
            "ajdv_pm_sheet": team_response.data.get("ajdv_pm_sheet") if team_response.data else None
        }

        return result_data
    except Exception as e:
        print(f"Error fetching user profile for sheet: {e}")
        return None
    
async def update_document(did: int, payload: dict):
    update_data = {
            "status": payload.get("status"),
            "stamp_at": datetime.now().isoformat(),  # ‡πÉ‡∏ä‡πâ .isoformat() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }
    try:

        response = supabase.table("doc").update(update_data).eq("did", did).execute()


        return response.data

    except Exception as e:

        print(f"Error updating documents for document {did}: {e}")
        return []
    

