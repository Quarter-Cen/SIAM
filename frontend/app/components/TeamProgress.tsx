'use client';

import { useEffect, useState } from "react";
import axios from "axios";
import { useRouter } from "next/navigation";
import { jwtDecode } from "jwt-decode";
import Link from "next/link";

// ---------------------------------------------------
// Interfaces
// ---------------------------------------------------

interface DecodedToken {
  sub: string;
  role: "student" | "teacher";
  exp: number;
}

interface UserData {
  tid: string;
  name: string;
}

// üõë ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ: ‡∏•‡∏ö imageUrl ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Team interface
interface Team {
  teamid: string;
}

interface TeamCardProps {
  teamid: string;
}

// ---------------------------------------------------
// TeamCard Component (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
// ---------------------------------------------------

// üõë ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ: ‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà teamid ‡πÄ‡∏õ‡πá‡∏ô props
const TeamCard: React.FC<TeamCardProps> = ({ teamid }) => {
  // üí° Logic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ teamid ‡πÄ‡∏õ‡πá‡∏ô 'T01' ‡∏´‡∏£‡∏∑‡∏≠ '01')
  // ‡∏ñ‡πâ‡∏≤ teamid ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô
  const teamNumber = teamid.replace(/\D/g, ''); 

  return (
    // ‡∏õ‡∏£‡∏±‡∏ö Tailwind: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡πâ‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°
    <div className="flex h-full flex-1 flex-col gap-4 rounded-lg min-w-40 transition-transform duration-200 hover:scale-105">
      
      {/* üõë ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç */}
      <div
        className="w-full aspect-square rounded-full flex items-center justify-center 
                   bg-blue-600 text-white shadow-lg border-4 border-blue-200"
      >
        {/* üõë ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î */}
        <p className="text-4xl font-extrabold">{teamNumber}</p>
      </div>

      {/* üõë ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ï‡πâ Card */}
      <div>
        <p className="text-[#111418] text-base font-medium leading-normal text-center">
          ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà {teamid}
        </p>
      </div>
    </div>
  );
};

// ---------------------------------------------------
// TeamProgress Component
// ---------------------------------------------------

export default function TeamProgress() {
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);

  const router = useRouter();

  // 1. Fetch User Data / Check Token (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    async function fetchUserData() {
      const token = localStorage.getItem("access_token");
      if (!token) {
        router.push("/");
        return;
      }
      try {
        const decoded: DecodedToken = jwtDecode(token);
        const userID = decoded.sub;
        const response = await axios.get<UserData>(
          `${process.env.NEXT_PUBLIC_API_BASE_URL}/permission/get-teacher-profile/${userID}`
        );
        setUserData(response.data);
      } catch (error) {
        console.error("Error fetching user data or decoding token:", error);
        router.push("/");
      }
    }
    fetchUserData();
  }, [router]);

  // 2. Fetch Team Progress (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ Logic)
  useEffect(() => {
    if (userData) {
      const fetchTeamProgress = async () => {
        try {
          const response = await axios.get<Team[]>(
            `${process.env.NEXT_PUBLIC_API_BASE_URL}/api/topics/team-progress/${userData.tid}`
          );
          
          // üõë ‡∏•‡∏ö Logic ‡∏Å‡∏≤‡∏£ map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á teamsWithImages ‡∏≠‡∏≠‡∏Å
          setTeams(response.data); 
          
          console.log(response.data);
          setError(null);
        } catch (err) {
          console.error("Failed to fetch team progress:", err);
          setError("Failed to load team data. Please try again later.");
        } finally {
          setLoading(false);
        }
      };
      fetchTeamProgress();
    }
  }, [userData]);

  // 3. Render Status (Loading, Empty, Error - ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  if (loading) {
    return (
      <>
        <h2 className="text-[#111418] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">
          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
        </h2>
        <div className="flex overflow-y-auto [-ms-scrollbar-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden">
          <div className="p-4 text-center text-gray-500">
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          </div>
        </div>
      </>
    );
  }

  if (teams.length === 0) {
    return (
      <>
        <h2 className="text-[#111418] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">
          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
        </h2>
        <div className="flex overflow-y-auto [-ms-scrollbar-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden">
          <div className="p-4 text-center text-gray-500">
            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°</p>
          </div>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <h2 className="text-[#111418] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">
          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
        </h2>
        <div className="flex overflow-y-auto [-ms-scrollbar-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden">
          <div className="p-4 text-center text-red-500">
            <p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {error}</p>
          </div>
        </div>
      </>
    );
  }

  // 4. Render Success (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ props ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ TeamCard)
  return (
    <>
      <h2 className="text-[#111418] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
      </h2>
      <div className="flex overflow-y-auto [-ms-scrollbar-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden">
        <div className="flex items-stretch p-4 gap-3">
          {teams.map((team, index) => (
            <Link href={`/my-teams/${team.teamid}`} key={team.teamid || index} passHref>
              <TeamCard
                teamid={team.teamid}
                // üõë ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á imageUrl ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
              />
            </Link>
          ))}
        </div>
      </div>
    </>
  );
}